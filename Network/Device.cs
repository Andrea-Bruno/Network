using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Xml.Serialization;

namespace NetworkManager
{
  public class Device
  {
    /// <summary>
    /// Returns the list of virtual devices already initialized, and the real device if already initialized
    /// </summary>
    /// <param name="VirtualDevice"></param>
    public Device(VirtualDevice VirtualDevice)
    {
      OnlineDetection = new OnlineDetectionClass(this);
      if (VirtualDevice != null)
      {
        BD = BaseDevices.Find(x => x.VirtualDevice == VirtualDevice);
        if (BD == null)
          BD = new BaseDevice();
        VirtualDevice.Device = BD;
        this.VirtualDevice = VirtualDevice;
      }
      else
      {
        if (RealDevice == null)
          RealDevice = new BaseDevice();
        BD = RealDevice;
      }
      OnReceivesHttpRequest = BD.OnReceivesHttpRequest;
      if (!BaseDevices.Contains(BD))
        BaseDevices.Add(BD);
    }
    public static VirtualDevice FindDeviceByAddress(string Address)
    {
      Uri uriAddress = new Uri(Address);
      var Domain = uriAddress.GetLeftPart(UriPartial.Authority);
      return VirtualDevices.Find(x => x.Address == Domain);
    }
    public static List<VirtualDevice> VirtualDevices
    {
      get
      {
        var List = new List<VirtualDevice>();
        foreach (var BaseDevice in BaseDevices)
        {
          List.Add(BaseDevice.VirtualDevice);
        }
        return List;
      }
    }
    internal static List<BaseDevice> BaseDevices = new List<BaseDevice>();
    private readonly BaseDevice BD;
    internal List<Network> Networks { get { return BD.Networks; } }
    public string MachineName { get { return BD.MachineName; } }
    /// <summary>
    /// If the internet works correctly it returns "true". If the auto detect realizes that there is no internet connection then it returns "false".
    /// In this case, auto detect will continue to monitor the network and this function will return "true" as soon as the connection returns.
    /// </summary>
    public bool IsOnline { get { return BD._IsOnline; } internal set { BD._IsOnline = value; } }
    internal DateTime Now { get { return BD.Now(); } }
    internal VirtualDevice VirtualDevice { get { return BD.VirtualDevice; } set { BD.VirtualDevice = value; } }
    private static BaseDevice RealDevice;
    internal class BaseDevice
    {
      public List<Network> Networks = new List<Network>();
      public string MachineName
      {
        get
        {
          if (VirtualDevice == null)
            return VirtualDevice.MachineName;
          else
            return Environment.MachineName;
        }
      }
      internal bool _IsOnline = true;
      public bool IsOnline { get { return _IsOnline; } }
      internal DateTime Now()
      {
        return DateTime.UtcNow;
      }
      internal VirtualDevice VirtualDevice;
      /// <summary>
      /// Returns the HTML content generated by the request
      /// </summary>
      /// <param name="QueryString"></param>
      /// <param name="Form"></param>
      /// <param name="FromIP"></param>
      /// <returns></returns>
      public WebResponse WebServer(WebRequest Request)
      {
        {
          WebResponse Response = null;
          if (VirtualDevice.IsOnline)
          {
            CurrentWebRequest += 1;
            if (CurrentWebRequest > 5)
            {
              Response = new WebResponse(null, null, 429, "Too Many Requests");
            }
            else
            {
              using (System.IO.Stream Stream = new System.IO.MemoryStream())
                if (OnReceivesHttpRequest(Request.QueryString, Request.Form, Request.FromIP, out string ContentType, Stream))
                {
                  float MB = Stream.Length / 1048576f;
                  // It is empirical but excellent for simulating the network speed as set by the Virtual Server
                  int PauseMS = (int)(MB / VirtualDevice.NetSpeed * 1000 * CurrentWebRequest);
                  System.Threading.Thread.Sleep(PauseMS);
                  Stream.Position = 0;
                  using (var streamReader = new System.IO.StreamReader(Stream))
                    Response = new WebResponse(streamReader.ReadToEnd(), ContentType, 200, "OK");
                }
            }
            CurrentWebRequest -= 1;
          }
          return Response; //null if is offline
        }
      }
      private int CurrentWebRequest = 0;
      public class WebResponse
      {
        internal WebResponse(string Text, string ContentType, int StatusCode, string StatusDescription)
        {
          this.Text = Text;
          this.StatusCode = StatusCode;
          this.StatusDescription = StatusDescription;
          if (ContentType != null)
            Headers.Add("Content-Type", ContentType);
        }
        public string Status { get { return StatusCode.ToString() + " " + StatusDescription; } }
        public readonly int StatusCode;
        public readonly string StatusDescription;
        public readonly string Text;
        public readonly System.Collections.Specialized.NameValueCollection Headers = new System.Collections.Specialized.NameValueCollection();
      }
      public class WebRequest
      {
        public WebRequest(System.Collections.Specialized.NameValueCollection QueryString, System.Collections.Specialized.NameValueCollection Form, string FromIP)
        {
          this.QueryString = QueryString;
          this.Form = Form;
          this.FromIP = FromIP;
        }
        public readonly System.Collections.Specialized.NameValueCollection QueryString;
        public readonly System.Collections.Specialized.NameValueCollection Form;
        public readonly string FromIP;
        public string Method { get { return Form == null ? "GET" : "POST"; } }
      }
      /// <summary>
      /// This procedure receives an http request and processes the response based on the input received and the protocol
      /// </summary>
      /// <param name="QueryString">QueryString Collection</param>
      /// <param name="Form">Form Collection</param>
      /// <param name="FromIP">the IP of who generated the request</param>
      /// <param name="ContentType">The ContentType of the answer</param>
      /// <param name="OutputStream">The stream to which the reply will be sent</param>
      /// <returns>True if the operation was successful</returns>
      public bool OnReceivesHttpRequest(System.Collections.Specialized.NameValueCollection QueryString, System.Collections.Specialized.NameValueCollection Form, string FromIP, out string ContentType, System.IO.Stream OutputStream)
      {
        var NetworkName = QueryString["network"];
        foreach (var Network in Networks)
        {
          if (NetworkName == Network.NetworkName)
          {
            var AppName = QueryString["app"];
            var ToUser = QueryString["touser"];
            var FromUser = QueryString["fromuser"];
            var Post = QueryString["post"];
            var Request = QueryString["request"];
            int.TryParse(QueryString["sectimeout"], out int SecTimeout);
            int.TryParse(QueryString["secwaitanswer"], out int SecWaitAnswer);

            string XmlObject = null;
            if (Form["object"] != null)
              XmlObject = Converter.Base64ToString(Form["object"]);

            if (ToUser == MachineName || ToUser.StartsWith(MachineName + "."))
            {
              var Parts = ToUser.Split('.'); // [0]=MachineName, [1]=PluginName
              string PluginName = null;
              if (Parts.Length > 1)
              {
                PluginName = Parts[1];
              }
              object ReturnObject = null;
              try
              {
                if (!string.IsNullOrEmpty(PluginName))
                {
                  //foreach (PluginManager.Plugin Plugin in AllPlugins())
                  //{
                  //  if (Plugin.IsEnabled(Setting))
                  //  {
                  //    if (Plugin.Name == PluginName)
                  //    {
                  //      Plugin.PushObject(Post, XmlObject, Form, ReturnObject);
                  //      break;
                  //    }
                  //  }
                  //}
                }
                else
                {
                  if (!string.IsNullOrEmpty(Post))//Post is a GetType Name
                  {
                    //Is a object trasmission
                    if (string.IsNullOrEmpty(FromUser))
                      ReturnObject = "error: no server name setting";
                    else if (Network.Protocol.OnReceivingObjectsActions.ContainsKey(Post))
                      ReturnObject = Network.Protocol.OnReceivingObjectsActions[Post](XmlObject);
                  }
                  if (!string.IsNullOrEmpty(Request))
                  //Is a request o object
                  {
                    if (Network.Protocol.OnRequestActions.ContainsKey(Request))
                      ReturnObject = Network.Protocol.OnRequestActions[Request](XmlObject);
                    if (Protocol.StandardMessages.TryParse(Request, out Protocol.StandardMessages Rq))
                    {
                      if (Rq == Protocol.StandardMessages.NetworkNodes)
                        ReturnObject = Network.NodeList;
                      else if (Rq == Protocol.StandardMessages.GetStats)
                      {
                        ReturnObject = new Protocol.Stats { NetworkLatency = (int)Network.BufferManager.Stats24h.NetworkLatency.TotalMilliseconds };
                      }
                      else if (Rq == Protocol.StandardMessages.SendElementsToNode)
                        if (Converter.XmlToObject(XmlObject, typeof(List<BufferManager.ObjToNode>), out object ObjElements))
                        {
                          var UintFromIP = Converter.IpToUint(FromIP);
                          var FromNode = Network.NodeList.Find((x) => x.IP == UintFromIP);
                          if (FromNode != null)
                          {
                            ReturnObject = Network.BufferManager.AddLocalFromNode((List<BufferManager.ObjToNode>)ObjElements, FromNode);
                            if (ReturnObject == null)
                              ReturnObject = Protocol.StandardAnsware.Ok;
                          }
                        }
                        else
                          ReturnObject = Protocol.StandardAnsware.Error;

                      else if (Rq == Protocol.StandardMessages.SendTimestampSignatureToNode)
                        if (Converter.XmlToObject(XmlObject, typeof(BufferManager.ObjToNode.TimestampVector), out object TimestampVector))
                        {
                          var UintFromIP = Converter.IpToUint(FromIP);
                          var FromNode = Network.NodeList.Find((x) => x.IP == UintFromIP);
                          if (FromNode != null)
                          {
                            if (Network.BufferManager.UnlockElementsInStandBy((BufferManager.ObjToNode.TimestampVector)TimestampVector, FromNode))
                              ReturnObject = Protocol.StandardAnsware.Ok;
                            else
                              ReturnObject = Protocol.StandardAnsware.Error;
                          }
                        }
                        else
                          ReturnObject = Protocol.StandardAnsware.Error;

                      else if (Rq == Protocol.StandardMessages.AddToBuffer)
                        if (Network.BufferManager.AddLocal(XmlObject) == true)
                          ReturnObject = Protocol.StandardAnsware.Ok;
                        else
                          ReturnObject = Protocol.StandardAnsware.Error;
                      else if (Rq == Protocol.StandardMessages.ImOffline || Rq == Protocol.StandardMessages.ImOnline)
                        if (Converter.XmlToObject(XmlObject, typeof(Network.Node), out object ObjNode))
                        {
                          var Node = (Network.Node)ObjNode;
                          ReturnObject = Protocol.StandardAnsware.Ok;
                          if (Rq == Protocol.StandardMessages.ImOnline)
                          {
                            Node.DetectIP();
                            if (Network.NodeList.Select(x => x.IP == Node.IP && Node.IP != Converter.IpToUint("127.0.0.1")) != null)
                              ReturnObject = Protocol.StandardAnsware.DuplicateIP;
                            else
                            {
                              if (Network.Protocol.SpeedTest(Node))
                                lock (Network.NodeList)
                                {
                                  Network.NodeList.Add(Node);
                                  Network.NodeList = Network.NodeList.OrderBy(o => o.Address).ToList();
                                }
                              else
                                ReturnObject = Protocol.StandardAnsware.TooSlow;
                            }
                          }
                        }
                        else
                          ReturnObject = Protocol.StandardAnsware.Error;
                      else if (Rq == Protocol.StandardMessages.TestSpeed)
                        ReturnObject = new string('x', 1048576);
                      ContentType = "text/xml;charset=utf-8";
                      XmlSerializer xml = new XmlSerializer(ReturnObject.GetType());
                      XmlSerializerNamespaces xmlns = new XmlSerializerNamespaces();
                      xmlns.Add(string.Empty, string.Empty);
                      xml.Serialize(OutputStream, ReturnObject, xmlns);
                      return true;
                    }
                  }
                }
              }
              catch (Exception ex)
              {
                System.Diagnostics.Debug.Print(ex.Message);
                System.Diagnostics.Debugger.Break();
                ReturnObject = ex.Message;
              }
              if (ReturnObject != null && string.IsNullOrEmpty(Request))
              {
                var Vector = new Comunication.ObjectVector(ToUser, ReturnObject);
                ContentType = "text/xml;charset=utf-8";
                XmlSerializer xml = new XmlSerializer(typeof(Comunication.ObjectVector));
                XmlSerializerNamespaces xmlns = new XmlSerializerNamespaces();
                xmlns.Add(string.Empty, string.Empty);
                xml.Serialize(OutputStream, Vector, xmlns);
                return true;
              }
            }
            //if (Post != "")
            //  var se = new SpolerElement(AppName, FromUser, ToUser, QueryString("post"), XmlObject, SecTimeout);

            //if (string.IsNullOrEmpty(Request))
            //  SendObject(AppName, FromUser, ToUser, SecWaitAnswer);
            //else
            //  switch (Request)
            //  {
            //    default:
            //      break;
            //  }


          }
        }
        ContentType = null;
        return false;
      }
    }
    internal readonly OnlineDetectionClass OnlineDetection;
    internal class OnlineDetectionClass
    {
      public OnlineDetectionClass(Device Device)
      {
        CheckInternetConnection = new System.Timers.Timer(30000) { AutoReset = true, Enabled = false, };
        CheckInternetConnection.Elapsed += (sender, e) => ElapsedCheckInternetConnection();
        this.Device = Device;
      }
      private readonly Device Device;
      private bool CheckImOnline()
      {
        if (Device.BD.VirtualDevice != null)
          return Device.BD.VirtualDevice.IsOnline;
        try
        {
          bool r1 = (new System.Net.NetworkInformation.Ping().Send("www.google.com.mx").Status == System.Net.NetworkInformation.IPStatus.Success);
          bool r2 = (new System.Net.NetworkInformation.Ping().Send("www.bing.com").Status == System.Net.NetworkInformation.IPStatus.Success);
          return r1 && r2;
        }
        catch (Exception ex)
        {
          System.Diagnostics.Debug.Print(ex.Message);
          System.Diagnostics.Debugger.Break();
        }
        return false;
      }
      private System.Timers.Timer CheckInternetConnection;
      private void ElapsedCheckInternetConnection()
      {
        if (RunningCheckInternetConnection == 1)
        {
          Device.BD._IsOnline = CheckImOnline();
          if (Device.BD._IsOnline)
          {
            CheckInternetConnection.Stop();
            RunningCheckInternetConnection = 0;
            Device.Networks.ForEach(x => x.Start());
          }
        }
      }
      private int RunningCheckInternetConnection = 0;
      /// <summary>
      /// He waits and checks the internet connection, and starts the communication protocol by notifying the online presence
      /// </summary>
      internal void WaitForInternetConnection()
      {
        RunningCheckInternetConnection += 1;
        if (RunningCheckInternetConnection == 1)
        {
          CheckInternetConnection.Start();
          ElapsedCheckInternetConnection();
        }
      }
    }
    public delegate bool OnReceivesHttpRequestDelegate(System.Collections.Specialized.NameValueCollection QueryString, System.Collections.Specialized.NameValueCollection Form, string FromIP, out string ContentType, System.IO.Stream OutputStream);
    /// <summary>
    /// This procedure receives an http request and processes the response based on the input received and the protocol
    /// </summary> 
    /// <param name="QueryString">QueryString Collection</param>
    /// <param name="Form">Form Collection</param>
    /// <param name="FromIP">the IP of who generated the request</param>
    /// <param name="ContentType">The ContentType of the answer</param>
    /// <param name="OutputStream">The stream to which the reply will be sent</param>
    /// <returns>True if the operation was successful</returns>
    public OnReceivesHttpRequestDelegate OnReceivesHttpRequest;
  }

}
